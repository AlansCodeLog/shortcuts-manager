name: Docs

env:
  USE_LOCKFILE: false

on:
  push:
    branches: [ master ]
  repository_dispatch:
    types: [ docs ]

jobs:
  docs:
    if: "! contains(toJSON(github.event.commits.*.message), '[skip ci]')"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ["latest"]

    steps:

    # region Setup
    - uses: actions/checkout@v2

    - name: Setting Up Node.js (${{ matrix.node-version }})
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}

    - uses: pnpm/action-setup@v2.0.1
      name: Install pnpm
      id: pnpm-install
      with:
          version: latest

    - name: Get Pnpm Cache Path
      if: "env.USE_LOCKFILE == 'true'"
      id: pnpm-cache
      run: |
        echo "::set-output name=dir::$(pnpm store path)"

    - uses: actions/cache@v3
      if: "env.USE_LOCKFILE == 'true'"
      name: pnpm cache
      with:
        path: ${{ steps.pnpm-cache.outputs.dir }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-

    - run: "echo Cache Key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}"
    - run: "echo Cache Restore-Keys: ${{ runner.os }}-pnpm-store-"
    - run: "echo Pnpm Cache Hit: ${{ steps.pnpm-cache.outputs.cache-hit }}"
    # regionend

    # region Steps
    - run: pnpm install --frozen-lockfile
      if: "env.USE_LOCKFILE == 'true'"

    - run: pnpm install

    - run: pnpm build

    - run: pnpm doc

    - name: Documentation
      # TOCONFIGURE
      if: "env.REMOVE_LINE_TO_ENABLE == 'true'"
      uses: crazy-max/ghaction-github-pages@v2
      with:
        target_branch: gh-pages
        build_dir: docs
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    # regionend
